(defun load (V1704) (let TC? (value shen.*tc*) (let Load (let Start (get-time run) (let Result (shen.load-help TC? (read-file V1704)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (pr (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if TC? (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V1707 V1708) (cond ((= false V1707) (shen.eval-and-print V1708)) (true (shen.check-eval-and-print V1708))))

(defun shen.eval-and-print (V1709) (map (lambda Y (pr (shen.app (eval-kl (shen.shen->kl Y)) "
" shen.s) (stoutput))) V1709))

(defun shen.check-eval-and-print (V1710) (let Table (mapcan (lambda Y (shen.typetable Y)) V1710) (let Assume (shen.assumetypes Table) (trap-error (shen.work-through V1710) (lambda E (shen.unwind-types E Table))))))

(defun shen.typetable (V1715) (cond ((and (cons? V1715) (and (= define (hd V1715)) (and (cons? (tl V1715)) (and (cons? (tl (tl V1715))) (= { (hd (tl (tl V1715)))))))) (cons (hd (tl V1715)) (cons (shen.rectify-type (shen.type-F (hd (tl V1715)) (tl (tl (tl V1715))))) ()))) ((and (cons? V1715) (and (= define (hd V1715)) (cons? (tl V1715)))) (simple-error (cn "missing { in " (shen.app (hd (tl V1715)) "
" shen.a)))) (true ())))

(defun shen.type-F (V1722 V1723) (cond ((and (cons? V1723) (= } (hd V1723))) ()) ((cons? V1723) (cons (hd V1723) (shen.type-F V1722 (tl V1723)))) (true (simple-error (cn "missing } in " (shen.app V1722 "
" shen.a))))))

(defun shen.assumetypes (V1726) (cond ((= () V1726) ()) ((and (cons? V1726) (cons? (tl V1726))) (do (declare (hd V1726) (hd (tl V1726))) (shen.assumetypes (tl (tl V1726))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V1731 V1732) (cond ((and (cons? V1732) (cons? (hd V1732))) (do (destroy (hd (hd V1732))) (shen.unwind-types V1731 (tl V1732)))) (true (simple-error (error-to-string V1731)))))

(defun shen.work-through (V1735) (cond ((= () V1735) ()) ((and (cons? V1735) (and (cons? (tl V1735)) (and (cons? (tl (tl V1735))) (= (hd (tl V1735)) (intern ":"))))) (let Check (shen.typecheck (hd V1735) (hd (tl (tl V1735)))) (if (= Check false) (shen.type-error) (let Eval (eval-kl (shen.shen->kl (hd V1735))) (let Message (pr (shen.app Eval (cn " : " (shen.app (shen.pretty-type Check) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V1735))))))))) ((cons? V1735) (shen.work-through (cons (hd V1735) (cons (intern ":") (cons (protect A) (tl V1735)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V1737) (cond ((and (cons? V1737) (and (cons? (hd V1737)) (and (= str (hd (hd V1737))) (and (cons? (tl (hd V1737))) (and (cons? (hd (tl (hd V1737)))) (and (= list (hd (hd (tl (hd V1737))))) (and (cons? (tl (hd (tl (hd V1737))))) (and (= () (tl (tl (hd (tl (hd V1737)))))) (and (cons? (tl (tl (hd V1737)))) (and (= () (tl (tl (tl (hd V1737))))) (and (cons? (tl V1737)) (and (= --> (hd (tl V1737))) (and (cons? (tl (tl V1737))) (and (cons? (hd (tl (tl V1737)))) (and (= str (hd (hd (tl (tl V1737))))) (and (cons? (tl (hd (tl (tl V1737))))) (and (cons? (hd (tl (hd (tl (tl V1737)))))) (and (= list (hd (hd (tl (hd (tl (tl V1737))))))) (and (cons? (tl (hd (tl (hd (tl (tl V1737))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V1737)))))))) (and (cons? (tl (tl (hd (tl (tl V1737)))))) (and (= () (tl (tl (tl (hd (tl (tl V1737))))))) (and (= () (tl (tl (tl V1737)))) (= (hd (tl (hd (tl (hd V1737))))) (hd (tl (hd (tl (hd (tl (tl V1737))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V1737))))) (cons ==> (tl (tl (hd (tl (tl V1737)))))))) (true V1737)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V1738) (let KLFile (shen.klfile V1738) (let Code (read-file V1738) (let Open (open KLFile out) (let KL (map (lambda X (shen.shen->kl-h X)) Code) (let Write (shen.write-kl KL Open) KLFile))))))

(defun shen.write-kl (V1741 V1742) (cond ((= () V1741) (close V1742)) ((and (cons? V1741) (cons? (hd V1741))) (shen.write-kl (tl V1741) (do (shen.write-kl-h (hd V1741) V1742) V1742))) ((cons? V1741) (shen.write-kl (tl V1741) V1742)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V1745 V1746) (cond ((and (cons? V1745) (and (= defun (hd V1745)) (and (cons? (tl V1745)) (and (= fail (hd (tl V1745))) (and (cons? (tl (tl V1745))) (and (= () (hd (tl (tl V1745)))) (and (cons? (tl (tl (tl V1745)))) (= () (tl (tl (tl (tl V1745)))))))))))) (pr "(defun fail () shen.fail!)" V1746)) (true (pr (shen.app V1745 "

" shen.r) V1746))))

(defun shen.klfile (V1747) (cond ((= "" V1747) ".kl") ((= ".shen" V1747) ".kl") ((shen.+string? V1747) (@s (hdstr V1747) (shen.klfile (tlstr V1747)))) (true (shen.f-error shen.klfile))))

