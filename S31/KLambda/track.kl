(defun shen.f-error (V4559) (do (pr (cn "partial function " (shen.app V4559 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V4559)) (y-or-n? (cn "track " (shen.app V4559 "? " shen.a)))) (shen.track-function (ps V4559)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V4560) (element? V4560 (value shen.*tracking*)))

(defun track (V4561) (let Source (ps V4561) (shen.track-function Source)))

(defun shen.track-function (V4564) (cond ((and (cons? V4564) (and (= defun (hd V4564)) (and (cons? (tl V4564)) (and (cons? (tl (tl V4564))) (and (cons? (tl (tl (tl V4564)))) (= () (tl (tl (tl (tl V4564)))))))))) (let KL (cons defun (cons (hd (tl V4564)) (cons (hd (tl (tl V4564))) (cons (shen.insert-tracking-code (hd (tl V4564)) (hd (tl (tl V4564))) (hd (tl (tl (tl V4564))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (simple-error "implementation error in shen.track-function"))))

(defun shen.insert-tracking-code (V4565 V4566 V4567) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V4565 (cons (shen.cons-form (shen.prolog-track V4567 V4566)) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons (protect Result) (cons V4567 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V4565 (cons (protect Result) ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (protect Result) ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(defun shen.prolog-track (V4568 V4569) (cond ((= (occurrences shen.incinfs V4568) 0) V4569) (true (shen.vector-dereference V4569 (shen.vector-parameter V4569)))))

(defun shen.vector-parameter (V4572) (cond ((= () V4572) ()) ((and (cons? V4572) (and (cons? (tl V4572)) (and (cons? (tl (tl V4572))) (and (cons? (tl (tl (tl V4572)))) (= () (tl (tl (tl (tl V4572))))))))) (hd V4572)) ((cons? V4572) (shen.vector-parameter (tl V4572))) (true (shen.f-error shen.vector-parameter))))

(defun shen.vector-dereference (V4575 V4576) (cond ((= () V4576) V4575) ((and (cons? V4575) (and (cons? (tl V4575)) (and (cons? (tl (tl V4575))) (and (cons? (tl (tl (tl V4575)))) (= () (tl (tl (tl (tl V4575))))))))) V4575) ((cons? V4575) (cons (cons shen.deref (cons (hd V4575) (cons V4576 ()))) (shen.vector-dereference (tl V4575) V4576))) (true (shen.f-error shen.vector-dereference))))

(defun step (V4579) (cond ((= + V4579) (set shen.*step* true)) ((= - V4579) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V4582) (cond ((= + V4582) (set shen.*spy* true)) ((= - V4582) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V4585) (cond ((= 94 V4585) (simple-error "aborted")) (true true)))

(defun shen.input-track (V4586 V4587 V4588) (do (pr (cn "
" (shen.app (shen.spaces V4586) (cn "<" (shen.app V4586 (cn "> Inputs to " (shen.app V4587 (cn " 
" (shen.app (shen.spaces V4586) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V4588)))

(defun shen.recursively-print (V4591) (cond ((= () V4591) (pr " ==>" (stoutput))) ((cons? V4591) (do (print (hd V4591)) (do (pr ", " (stoutput)) (shen.recursively-print (tl V4591))))) (true (simple-error "implementation error in shen.recursively-print"))))

(defun shen.spaces (V4592) (cond ((= 0 V4592) "") (true (cn " " (shen.spaces (- V4592 1))))))

(defun shen.output-track (V4593 V4594 V4595) (pr (cn "
" (shen.app (shen.spaces V4593) (cn "<" (shen.app V4593 (cn "> Output from " (shen.app V4594 (cn " 
" (shen.app (shen.spaces V4593) (cn "==> " (shen.app V4595 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V4596) (do (set shen.*tracking* (remove V4596 (value shen.*tracking*))) (trap-error (eval (ps V4596)) (lambda E V4596))))

(defun remove (V4597 V4598) (shen.remove-h V4597 V4598 ()))

(defun shen.remove-h (V4608 V4609 V4610) (cond ((= () V4609) (reverse V4610)) ((and (cons? V4609) (= V4608 (hd V4609))) (shen.remove-h (hd V4609) (tl V4609) V4610)) ((cons? V4609) (shen.remove-h V4608 (tl V4609) (cons (hd V4609) V4610))) (true (simple-error "implementation error in shen.remove-h"))))

(defun profile (V4611) (do (set shen.*profiled* (cons V4611 (value shen.*profiled*))) (shen.profile-help (ps V4611))))

(defun shen.profile-help (V4614) (cond ((and (cons? V4614) (and (= defun (hd V4614)) (and (cons? (tl V4614)) (and (cons? (tl (tl V4614))) (and (cons? (tl (tl (tl V4614)))) (= () (tl (tl (tl (tl V4614)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V4614)) (cons (hd (tl (tl V4614))) (cons (shen.profile-func (hd (tl V4614)) (hd (tl (tl V4614))) (cons G (hd (tl (tl V4614))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V4614))) (cons (subst G (hd (tl V4614)) (hd (tl (tl (tl V4614))))) ())))) (let CompileProfile (eval-kl Profile) (let CompileG (eval-kl Def) (hd (tl V4614)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V4615) (do (set shen.*profiled* (remove V4615 (value shen.*profiled*))) (trap-error (eval (ps V4615)) (lambda E V4615))))

(defun shen.profiled? (V4616) (element? V4616 (value shen.*profiled*)))

(defun shen.profile-func (V4617 V4618 V4619) (cons let (cons (protect Start) (cons (cons get-time (cons run ())) (cons (cons let (cons (protect Result) (cons V4619 (cons (cons let (cons (protect Finish) (cons (cons - (cons (cons get-time (cons run ())) (cons (protect Start) ()))) (cons (cons let (cons (protect Record) (cons (cons shen.put-profile (cons V4617 (cons (cons + (cons (cons shen.get-profile (cons V4617 ())) (cons (protect Finish) ()))) ()))) (cons (protect Result) ())))) ())))) ())))) ())))))

(defun profile-results (V4620) (let Results (shen.get-profile V4620) (let Initialise (shen.put-profile V4620 0) (@p V4620 Results))))

(defun shen.get-profile (V4621) (trap-error (get V4621 profile (value *property-vector*)) (lambda E 0)))

(defun shen.put-profile (V4622 V4623) (put V4622 profile V4623 (value *property-vector*)))

