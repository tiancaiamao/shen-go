(defun macroexpand (V1786) (let Fs (map (lambda X (tl X)) (value *macros*)) (shen.macroexpand-h V1786 Fs Fs)))

(defun shen.macroexpand-h (V1795 V1796 V1797) (cond ((= () V1796) V1795) ((cons? V1796) (let Y (shen.walk (hd V1796) V1795) (if (= V1795 Y) (shen.macroexpand-h V1795 (tl V1796) V1797) (shen.macroexpand-h Y V1797 V1797)))) (true (simple-error "implementation error in shen.macroexpand-h"))))

(defun shen.walk (V1798 V1799) (cond ((cons? V1799) (V1798 (map (lambda Z (shen.walk V1798 Z)) V1799))) (true (V1798 V1799))))

(defun shen.defmacro-macro (V1800) (cond ((and (cons? V1800) (and (= defmacro (hd V1800)) (cons? (tl V1800)))) (let Default (cons (protect X) (cons -> (cons (protect X) ()))) (let Def (eval (cons define (cons (hd (tl V1800)) (append (tl (tl V1800)) Default)))) (let Record (shen.record-macro (hd (tl V1800)) (fn (hd (tl V1800)))) (hd (tl V1800)))))) (true V1800)))

(defun shen.u!-macro (V1801) (cond ((and (cons? V1801) (and (= u! (hd V1801)) (and (cons? (tl V1801)) (= () (tl (tl V1801)))))) (cons protect (cons (shen.make-uppercase (hd (tl V1801))) ()))) (true V1801)))

(defun shen.make-uppercase (V1802) (intern (shen.mu-h (str V1802))))

(defun shen.mu-h (V1803) (cond ((= "" V1803) "") ((shen.+string? V1803) (let ASCII (string->n (hdstr V1803)) (let ASCII-32 (- ASCII 32) (let Upper (if (and (>= ASCII 97) (<= ASCII 122)) (n->string ASCII-32) (hdstr V1803)) (@s Upper (shen.mu-h (tlstr V1803))))))) (true (shen.f-error shen.mu-h))))

(defun shen.record-macro (V1804 V1805) (set *macros* (shen.update-assoc V1804 V1805 (value *macros*))))

(defun shen.update-assoc (V1815 V1816 V1817) (cond ((= () V1817) (cons (cons V1815 V1816) ())) ((and (cons? V1817) (and (cons? (hd V1817)) (= V1815 (hd (hd V1817))))) (cons (cons (hd (hd V1817)) V1816) (tl V1817))) ((cons? V1817) (cons (hd V1817) (shen.update-assoc V1815 V1816 (tl V1817)))) (true (simple-error "implementation error in shen.update-assoc"))))

(defun shen.error-macro (V1818) (cond ((and (cons? V1818) (and (= error (hd V1818)) (cons? (tl V1818)))) (cons simple-error (cons (shen.mkstr (hd (tl V1818)) (tl (tl V1818))) ()))) (true V1818)))

(defun shen.output-macro (V1819) (cond ((and (cons? V1819) (and (= output (hd V1819)) (cons? (tl V1819)))) (cons pr (cons (shen.mkstr (hd (tl V1819)) (tl (tl V1819))) (cons (cons stoutput ()) ())))) ((and (cons? V1819) (and (= pr (hd V1819)) (and (cons? (tl V1819)) (= () (tl (tl V1819)))))) (cons pr (cons (hd (tl V1819)) (cons (cons stoutput ()) ())))) (true V1819)))

(defun shen.make-string-macro (V1820) (cond ((and (cons? V1820) (and (= make-string (hd V1820)) (cons? (tl V1820)))) (shen.mkstr (hd (tl V1820)) (tl (tl V1820)))) (true V1820)))

(defun shen.input-macro (V1821) (cond ((and (cons? V1821) (and (= lineread (hd V1821)) (= () (tl V1821)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V1821) (and (= input (hd V1821)) (= () (tl V1821)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V1821) (and (= read (hd V1821)) (= () (tl V1821)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V1821) (and (= input+ (hd V1821)) (and (cons? (tl V1821)) (= () (tl (tl V1821)))))) (cons input+ (cons (hd (tl V1821)) (cons (cons stinput ()) ())))) ((and (cons? V1821) (and (= read-byte (hd V1821)) (= () (tl V1821)))) (if (shen.char-stinput? (stinput)) (cons string->n (cons (cons shen.read-unit-string (cons (cons stinput ()) ())) ())) (cons read-byte (cons (cons stinput ()) ())))) (true V1821)))

(defun shen.defcc-macro (V1822) (cond ((and (cons? V1822) (= defcc (hd V1822))) (shen.yacc->shen (tl V1822))) (true V1822)))

(defun shen.prolog-macro (V1823) (cond ((and (cons? V1823) (= prolog? (hd V1823))) (shen.call-prolog (tl V1823))) (true V1823)))

(defun shen.call-prolog (V1824) (let Bindings (cons shen.reset-prolog-vector ()) (let Lock (cons @v (cons true (cons 0 (cons (cons vector (cons 0 ())) ())))) (let Key 0 (let Continuation (cons freeze (cons true ())) (let CLiterals (compile (lambda X (shen.<body> X)) V1824) (let Received (shen.received V1824) (let B (gensym (protect V)) (let L (gensym (protect L)) (let K (gensym (protect K)) (let C (gensym (protect C)) (let Lambda (cons lambda (cons B (cons (cons lambda (cons L (cons (cons lambda (cons K (cons (cons lambda (cons C (cons (shen.continue Received CLiterals B L K C) ()))) ()))) ()))) ()))) (cons Lambda (cons Bindings (cons Lock (cons Key (cons Continuation ())))))))))))))))))

(defun shen.received (V1827) (cond ((and (cons? V1827) (and (= receive (hd V1827)) (and (cons? (tl V1827)) (= () (tl (tl V1827)))))) (tl V1827)) ((cons? V1827) (union (shen.received (hd V1827)) (shen.received (tl V1827)))) (true ())))

(defun shen.reset-prolog-vector () (address-> (value shen.*prolog-vector*) 1 2))

(defun receive (V1828) V1828)

(defun shen.defprolog-macro (V1829) (cond ((and (cons? V1829) (and (= defprolog (hd V1829)) (cons? (tl V1829)))) (shen.compile-prolog (hd (tl V1829)) (tl (tl V1829)))) (true V1829)))

(defun shen.datatype-macro (V1830) (cond ((and (cons? V1830) (and (= datatype (hd V1830)) (cons? (tl V1830)))) (let D (shen.intern-type (hd (tl V1830))) (let Compile (compile (lambda X (shen.<datatype> X)) (cons D (tl (tl V1830)))) D))) (true V1830)))

(defun shen.rcons_form (V1831) (cond ((cons? V1831) (cons cons (cons (shen.rcons_form (hd V1831)) (cons (shen.rcons_form (tl V1831)) ())))) (true V1831)))

(defun shen.intern-type (V1832) (intern (cn (str V1832) "#type")))

(defun shen.@s-macro (V1833) (cond ((and (cons? V1833) (and (= @s (hd V1833)) (and (cons? (tl V1833)) (and (cons? (tl (tl V1833))) (cons? (tl (tl (tl V1833)))))))) (cons @s (cons (hd (tl V1833)) (cons (shen.@s-macro (cons @s (tl (tl V1833)))) ())))) ((and (cons? V1833) (and (= @s (hd V1833)) (and (cons? (tl V1833)) (and (cons? (tl (tl V1833))) (and (= () (tl (tl (tl V1833)))) (string? (hd (tl V1833)))))))) (let E (explode (hd (tl V1833))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V1833))))) V1833))) (true V1833)))

(defun shen.synonyms-macro (V1834) (cond ((and (cons? V1834) (= synonyms (hd V1834))) (shen.synonyms-h (append (tl V1834) (value shen.*synonyms*)))) (true V1834)))

(defun shen.synonyms-h (V1835) (let CurryTypes (map (lambda X (shen.curry-type X)) V1835) (let Eval (eval (cons define (cons shen.demod (shen.compile-synonyms CurryTypes)))) synonyms)))

(defun shen.compile-synonyms (V1838) (cond ((= () V1838) (let X (gensym (protect X)) (cons X (cons -> (cons X ()))))) ((and (cons? V1838) (cons? (tl V1838))) (cons (shen.rcons_form (hd V1838)) (cons -> (cons (shen.rcons_form (hd (tl V1838))) (shen.compile-synonyms (tl (tl V1838))))))) (true (simple-error "synonyms requires an even number of arguments
"))))

(defun shen.nl-macro (V1839) (cond ((and (cons? V1839) (and (= nl (hd V1839)) (= () (tl V1839)))) (cons nl (cons 1 ()))) (true V1839)))

(defun shen.assoc-macro (V1840) (cond ((and (cons? V1840) (and (cons? (tl V1840)) (and (cons? (tl (tl V1840))) (and (cons? (tl (tl (tl V1840)))) (element? (hd V1840) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V1840) (cons (hd (tl V1840)) (cons (shen.assoc-macro (cons (hd V1840) (tl (tl V1840)))) ())))) (true V1840)))

(defun shen.let-macro (V1841) (cond ((and (cons? V1841) (and (= let (hd V1841)) (and (cons? (tl V1841)) (and (cons? (tl (tl V1841))) (and (cons? (tl (tl (tl V1841)))) (cons? (tl (tl (tl (tl V1841)))))))))) (cons let (cons (hd (tl V1841)) (cons (hd (tl (tl V1841))) (cons (shen.let-macro (cons let (tl (tl (tl V1841))))) ()))))) ((and (cons? V1841) (and (= let (hd V1841)) (and (cons? (tl V1841)) (and (cons? (tl (tl V1841))) (and (cons? (tl (tl (tl V1841)))) (= () (tl (tl (tl (tl V1841)))))))))) (if (variable? (hd (tl V1841))) V1841 (simple-error (shen.app (hd (tl V1841)) " is not a variable
" shen.s)))) (true V1841)))

(defun shen.abs-macro (V1842) (cond ((and (cons? V1842) (and (= /. (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (cons? (tl (tl (tl V1842)))))))) (cons lambda (cons (hd (tl V1842)) (cons (shen.abs-macro (cons /. (tl (tl V1842)))) ())))) ((and (cons? V1842) (and (= /. (hd V1842)) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (= () (tl (tl (tl V1842)))))))) (if (variable? (hd (tl V1842))) (cons lambda (tl V1842)) (simple-error (shen.app (hd (tl V1842)) " is not a variable
" shen.s)))) (true V1842)))

(defun shen.cases-macro (V1845) (cond ((and (cons? V1845) (and (= cases (hd V1845)) (and (cons? (tl V1845)) (and (= true (hd (tl V1845))) (cons? (tl (tl V1845))))))) (hd (tl (tl V1845)))) ((and (cons? V1845) (and (= cases (hd V1845)) (and (cons? (tl V1845)) (and (cons? (tl (tl V1845))) (= () (tl (tl (tl V1845)))))))) (cons if (cons (hd (tl V1845)) (cons (hd (tl (tl V1845))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V1845) (and (= cases (hd V1845)) (and (cons? (tl V1845)) (cons? (tl (tl V1845)))))) (cons if (cons (hd (tl V1845)) (cons (hd (tl (tl V1845))) (cons (shen.cases-macro (cons cases (tl (tl (tl V1845))))) ()))))) ((and (cons? V1845) (and (= cases (hd V1845)) (and (cons? (tl V1845)) (= () (tl (tl V1845)))))) (simple-error "error: odd number of case elements
")) (true V1845)))

(defun shen.timer-macro (V1846) (cond ((and (cons? V1846) (and (= time (hd V1846)) (and (cons? (tl V1846)) (= () (tl (tl V1846)))))) (shen.let-macro (cons let (cons (protect Start) (cons (cons get-time (cons run ())) (cons (protect Result) (cons (hd (tl V1846)) (cons (protect Finish) (cons (cons get-time (cons run ())) (cons (protect Time) (cons (cons - (cons (protect Finish) (cons (protect Start) ()))) (cons (protect Message) (cons (cons pr (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons (protect Time) ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons (protect Result) ())))))))))))))) (true V1846)))

(defun shen.tuple-up (V1847) (cond ((cons? V1847) (cons @p (cons (hd V1847) (cons (shen.tuple-up (tl V1847)) ())))) (true V1847)))

(defun shen.put/get-macro (V1848) (cond ((and (cons? V1848) (and (= put (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (and (cons? (tl (tl (tl V1848)))) (= () (tl (tl (tl (tl V1848)))))))))) (cons put (cons (hd (tl V1848)) (cons (hd (tl (tl V1848))) (cons (hd (tl (tl (tl V1848)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V1848) (and (= get (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (= () (tl (tl (tl V1848)))))))) (cons get (cons (hd (tl V1848)) (cons (hd (tl (tl V1848))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V1848) (and (= unput (hd V1848)) (and (cons? (tl V1848)) (and (cons? (tl (tl V1848))) (= () (tl (tl (tl V1848)))))))) (cons unput (cons (hd (tl V1848)) (cons (hd (tl (tl V1848))) (cons (cons value (cons *property-vector* ())) ()))))) (true V1848)))

(defun undefmacro (V1849) (do (set *macros* (remove (assoc V1849 (value *macros*)) (value *macros*))) V1849))

