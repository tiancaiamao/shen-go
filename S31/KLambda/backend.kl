(defun shen.kl-to-lisp (V4827) (shen.kl-to-lisp-h () V4827))

(defun shen.kl-to-lisp-h (V4835 V4836) (cond ((= (protect T) (((protect SHEN.MEMBER) V4836) V4835)) V4836) ((and (cons? V4836) (and (= type (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (= () (tl (tl (tl V4836)))))))) (shen.kl-to-lisp-h V4835 (hd (tl V4836)))) ((and (cons? V4836) (and (= protect (hd V4836)) (and (cons? (tl V4836)) (= () (tl (tl V4836)))))) (shen.kl-to-lisp-h V4835 (hd (tl V4836)))) ((and (cons? V4836) (and (= lambda (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (and (= () (tl (tl (tl V4836)))) (= (hd (tl V4836)) (protect T))))))) (shen.kl-to-lisp-h V4835 (shen.rectify-t V4836))) ((and (cons? V4836) (and (= lambda (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (= () (tl (tl (tl V4836)))))))) (cons (protect FUNCTION) (cons (cons (protect LAMBDA) (cons (cons (hd (tl V4836)) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V4836)) V4835) (hd (tl (tl V4836)))) ()))) ()))) ((and (cons? V4836) (and (= let (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (and (cons? (tl (tl (tl V4836)))) (and (= () (tl (tl (tl (tl V4836))))) (= (hd (tl V4836)) (protect T)))))))) (shen.kl-to-lisp-h V4835 (shen.rectify-t V4836))) ((and (cons? V4836) (and (= let (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (and (cons? (tl (tl (tl V4836)))) (= () (tl (tl (tl (tl V4836)))))))))) (cons (protect LET) (cons (cons (cons (hd (tl V4836)) (cons (shen.kl-to-lisp-h V4835 (hd (tl (tl V4836)))) ())) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V4836)) V4835) (hd (tl (tl (tl V4836))))) ())))) ((and (cons? V4836) (and (= defun (hd V4836)) (and (cons? (tl V4836)) (and (cons? (tl (tl V4836))) (and (cons? (tl (tl (tl V4836)))) (= () (tl (tl (tl (tl V4836)))))))))) (cons (protect DEFUN) (cons (hd (tl V4836)) (cons (hd (tl (tl V4836))) (cons (shen.kl-to-lisp-h (hd (tl (tl V4836))) (hd (tl (tl (tl V4836))))) ()))))) ((and (cons? V4836) (= cond (hd V4836))) (cons (protect COND) (((protect SHEN.MAPCAR) (lambda C (shen.cond-code V4835 C))) (tl V4836)))) ((and (cons? V4836) (or (= (protect T) (((protect SHEN.MEMBER) (hd V4836)) V4835)) (cons? (hd V4836)))) (let Lisp (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V4835 Y))) V4836) (shen.currylisp Lisp))) ((and (cons? V4836) (shen.fastsymbol? (hd V4836))) (let LispX (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V4835 Y))) (tl V4836)) (let LispF (shen.maplispsym (hd V4836)) (shen.optimise-application (cons LispF LispX))))) ((or (number? V4836) (or (string? V4836) (empty? V4836))) V4836) (true (cons (protect QUOTE) (cons V4836 ())))))

(defun shen.rectify-t (V4837) ((((protect SUBST) ((protect GENSYM) "x")) (protect T)) V4837))

(defun shen.currylisp (V4838) (cond ((and (cons? V4838) (and (cons? (tl V4838)) (cons? (tl (tl V4838))))) (shen.currylisp (cons (cons (protect FUNCALL) (cons (hd V4838) (cons (hd (tl V4838)) ()))) (tl (tl V4838))))) ((and (cons? V4838) (and (cons? (tl V4838)) (= () (tl (tl V4838))))) (cons (protect FUNCALL) V4838)) ((and (cons? V4838) (= () (tl V4838))) (cons (protect FUNCALL) V4838)) (true V4838)))

(defun shen.optimise-application (V4839) (cond ((and (cons? V4839) (and (= hd (hd V4839)) (and (cons? (tl V4839)) (= () (tl (tl V4839)))))) (cons (protect CAR) (cons (shen.optimise-application (hd (tl V4839))) ()))) ((and (cons? V4839) (and (= tl (hd V4839)) (and (cons? (tl V4839)) (= () (tl (tl V4839)))))) (cons (protect CDR) (cons (shen.optimise-application (hd (tl V4839))) ()))) ((and (cons? V4839) (and (= cons (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (= () (tl (tl (tl V4839)))))))) (cons (protect CONS) (cons (shen.optimise-application (hd (tl V4839))) (cons (shen.optimise-application (hd (tl (tl V4839)))) ())))) ((and (cons? V4839) (and (= append (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (= () (tl (tl (tl V4839)))))))) (cons (protect APPEND) (cons (shen.optimise-application (hd (tl V4839))) (cons (shen.optimise-application (hd (tl (tl V4839)))) ())))) ((and (cons? V4839) (and (= reverse (hd V4839)) (and (cons? (tl V4839)) (= () (tl (tl V4839)))))) (cons (protect REVERSE) (cons (shen.optimise-application (hd (tl V4839))) ()))) ((and (cons? V4839) (and (= length (hd V4839)) (and (cons? (tl V4839)) (= () (tl (tl V4839)))))) (cons (protect SHEN.LIST-LENGTH) (cons (shen.optimise-application (hd (tl V4839))) ()))) ((and (cons? V4839) (and (= if (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (and (cons? (tl (tl (tl V4839)))) (= () (tl (tl (tl (tl V4839)))))))))) (cons (protect IF) (cons (shen.wrap (hd (tl V4839))) (cons (shen.optimise-application (hd (tl (tl V4839)))) (cons (shen.optimise-application (hd (tl (tl (tl V4839))))) ()))))) ((and (cons? V4839) (and (= value (hd V4839)) (and (cons? (tl V4839)) (and (cons? (hd (tl V4839))) (and (cons? (tl (hd (tl V4839)))) (and (= () (tl (tl (hd (tl V4839))))) (and (= () (tl (tl V4839))) (= (hd (hd (tl V4839))) (protect QUOTE))))))))) (hd (tl (hd (tl V4839))))) ((and (cons? V4839) (and (= map (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (= () (tl (tl (tl V4839)))))))) (cons (protect SHEN.MAPCAR) (tl V4839))) ((and (cons? V4839) (and (= + (hd V4839)) (and (cons? (tl V4839)) (and (= 1 (hd (tl V4839))) (and (cons? (tl (tl V4839))) (= () (tl (tl (tl V4839))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl (tl V4839)))) ()))) ((and (cons? V4839) (and (= + (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (and (= 1 (hd (tl (tl V4839)))) (= () (tl (tl (tl V4839))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl V4839))) ()))) ((and (cons? V4839) (and (= - (hd V4839)) (and (cons? (tl V4839)) (and (cons? (tl (tl V4839))) (and (= 1 (hd (tl (tl V4839)))) (= () (tl (tl (tl V4839))))))))) (cons (intern "1-") (cons (shen.optimise-application (hd (tl V4839))) ()))) ((cons? V4839) (((protect SHEN.MAPCAR) (lambda Z (shen.optimise-application Z))) V4839)) (true V4839)))

(defun shen.cond-code (V4844 V4845) (cond ((and (cons? V4845) (and (cons? (tl V4845)) (= () (tl (tl V4845))))) (let LispTest (shen.wrap (shen.kl-to-lisp-h V4844 (hd V4845))) (let LispResult (shen.kl-to-lisp-h V4844 (hd (tl V4845))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun shen.wrap (V4846) (cond ((and (cons? V4846) (and (cons? (tl V4846)) (and (= true (hd (tl V4846))) (and (= () (tl (tl V4846))) (= (hd V4846) (protect QUOTE)))))) (protect T)) ((and (cons? V4846) (and (= cons? (hd V4846)) (and (cons? (tl V4846)) (= () (tl (tl V4846)))))) (cons (protect CONSP) (tl V4846))) ((and (cons? V4846) (and (= string? (hd V4846)) (and (cons? (tl V4846)) (= () (tl (tl V4846)))))) (cons (protect STRINGP) (tl V4846))) ((and (cons? V4846) (and (= number? (hd V4846)) (and (cons? (tl V4846)) (= () (tl (tl V4846)))))) (cons (protect NUMBERP) (tl V4846))) ((and (cons? V4846) (and (= empty? (hd V4846)) (and (cons? (tl V4846)) (= () (tl (tl V4846)))))) (cons (protect NULL) (tl V4846))) ((and (cons? V4846) (and (= and (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons (protect AND) (cons (shen.wrap (hd (tl V4846))) (cons (shen.wrap (hd (tl (tl V4846)))) ())))) ((and (cons? V4846) (and (= or (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons (protect OR) (cons (shen.wrap (hd (tl V4846))) (cons (shen.wrap (hd (tl (tl V4846)))) ())))) ((and (cons? V4846) (and (= not (hd V4846)) (and (cons? (tl V4846)) (= () (tl (tl V4846)))))) (cons (protect NOT) (cons (shen.wrap (hd (tl V4846))) ()))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (= () (hd (tl (tl V4846)))) (= () (tl (tl (tl V4846))))))))) (cons (protect NULL) (cons (hd (tl V4846)) ()))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (= () (hd (tl V4846))) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846))))))))) (cons (protect NULL) (tl (tl V4846)))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (cons? (hd (tl (tl V4846)))) (and (cons? (tl (hd (tl (tl V4846))))) (and (= () (tl (tl (hd (tl (tl V4846)))))) (and (= () (tl (tl (tl V4846)))) (and (= (hd (hd (tl (tl V4846)))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl (tl V4846))))))))))))))) (cons (protect EQ) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (hd (tl V4846))) (and (cons? (tl (hd (tl V4846)))) (and (= () (tl (tl (hd (tl V4846))))) (and (cons? (tl (tl V4846))) (and (= () (tl (tl (tl V4846)))) (and (= (hd (hd (tl V4846))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl V4846)))))))))))))) (cons (protect EQ) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (hd (tl V4846))) (and (= fail (hd (hd (tl V4846)))) (and (= () (tl (hd (tl V4846)))) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846))))))))))) (cons (protect EQ) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (cons? (hd (tl (tl V4846)))) (and (= fail (hd (hd (tl (tl V4846))))) (and (= () (tl (hd (tl (tl V4846))))) (= () (tl (tl (tl V4846))))))))))) (cons (protect EQ) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (= () (tl (tl (tl V4846)))) (string? (hd (tl V4846)))))))) (cons (protect EQUAL) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (= () (tl (tl (tl V4846)))) (string? (hd (tl (tl V4846))))))))) (cons (protect EQUAL) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (= () (tl (tl (tl V4846)))) (number? (hd (tl V4846)))))))) (cons (protect EQL) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (and (= () (tl (tl (tl V4846)))) (number? (hd (tl (tl V4846))))))))) (cons (protect EQL) (tl V4846))) ((and (cons? V4846) (and (= shen.equal? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons shen.ABSEQUAL (tl V4846))) ((and (cons? V4846) (and (= shen.greater? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons > (tl V4846))) ((and (cons? V4846) (and (= shen.greater-than-or-equal-to? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons >= (tl V4846))) ((and (cons? V4846) (and (= shen.less? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons < (tl V4846))) ((and (cons? V4846) (and (= shen.less-than-or-equal-to? (hd V4846)) (and (cons? (tl V4846)) (and (cons? (tl (tl V4846))) (= () (tl (tl (tl V4846)))))))) (cons <= (tl V4846))) (true (cons shen.wrapper (cons V4846 ())))))

(defun shen.fastsymbol? (V4853) (cond ((cons? V4853) false) ((= () V4853) false) ((string? V4853) false) ((number? V4853) false) (true true)))

(defun shen.wrapper (V4854) (cond ((= true V4854) (protect T)) ((= false V4854) ()) (true (simple-error "boolean expected"))))

(defun shen.maplispsym (V4855) (cond ((= = V4855) shen.equal?) ((= > V4855) shen.greater?) ((= < V4855) shen.less?) ((= >= V4855) shen.greater-than-or-equal-to?) ((= <= V4855) shen.less-than-or-equal-to?) ((= + V4855) shen.add) ((= - V4855) shen.subtract) ((= / V4855) shen.divide) ((= * V4855) shen.multiply) (true V4855)))

