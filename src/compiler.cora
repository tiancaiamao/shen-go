(func parse
      env x => (if (elem? x env) x ['$global x]) where (symbol? x)
      env x => ['$const x] where (or (number? x) (string? x) (boolean? x) (null? x))
      env ['quote x] => ['$const x]
      env ['if x y z] => ['$if (parse env x) (parse env y) (parse env z)]
      env ['do x y] => ['$do (parse env x) (parse env y)]
      env ['lambda args body] => ['$lambda args (parse (append args env) body)]
      env [f . args] => (map (parse env) [f . args]))

(func peval-t
      bc ['$const x] => (cons ['return ['$const x]] bc)
      bc ['$global x] => (cons ['return ['$global x]] bc)
      bc ['$if x y z] => (let y1 (peval0 y)
			      z1 (peval0 z)
			      tmp (gensym 'ifres)
			      (peval bc x (lambda (bc1 reg1)
					    (cons ['if reg1 y1 z1] bc1))))
      bc ['$do x y] => (peval bc x (lambda (bc1 x1)
				    (peval-t (cons ['ignore x1] bc1) y)))
      bc ['$lambda args body] => (cons ['return ['lambda args (peval0 body)]] bc)
      bc [f . args] => (peval-call bc [f . args] []
				   (lambda (bc1 regs)
				     (cons ['tailapply . regs] bc1)))
      bc x => (cons ['return x] bc))

(func peval
      bc ['$const x] cc => (cc bc ['$const x])
      bc ['$global x] cc => (cc bc ['$global x])
      bc ['$if x y z] cc => (let tmp (gensym 'ifres)
				 (let y1 (peval [] y (lambda (bc1 y1) (cons 'block (reverse (cons ['<- tmp y1] bc1)))))
				      z1 (peval [] z (lambda (bc1 z1) (cons 'block (reverse (cons ['<- tmp z1] bc1)))))
				      (peval bc x (lambda (bc1 reg1)
						    (cc [['if reg1 y1 z1] ['var tmp] . bc1] tmp)))))
      bc ['$do x y] cc => (peval bc x (lambda (bc1 x1)
					(peval (cons ['ignore x1] bc1) y cc)))
      bc ['$lambda args body] cc => (let tmp (gensym 'tmp)
					 (cc (cons ['<-: tmp ['lambda args (peval0 body)]] bc) tmp))
      bc [f . args] cc => (peval-call bc [f . args] []
				      (lambda (bc1 regs)
					(let tmp (gensym 'tmp)
					     (cc (cons ['<-: tmp ['call . regs]] bc1) tmp))))
      bc x cc => (cc bc x))

(func peval-call
      bc [] regs cc => (cc bc (reverse regs))
      bc [x . xs] regs cc => (peval bc x (lambda (bc1 x1)
					     (peval-call bc1 xs (cons x1 regs) cc))))

(defun peval0 (exp)
  (let ret (reverse (peval-t [] exp))
       (if (= 1 (length ret))
	   (car ret)
	 (cons 'block ret))))

(defun codegen (input)
  (let ast (parse () input)
       (peval0 ast)))

(defun compile-file (fin fout)
  (let expr (cons 'begin (read-file-as-sexp fin true))
       (let expand (macroexpand expr)
	    (let bc (codegen expand)
		 (write-sexp-to-file fout bc)))))

